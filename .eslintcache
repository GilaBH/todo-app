[{"C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\index.js":"1","C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\App.js":"2","C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\reportWebVitals.js":"3","C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\FilterButtons.js":"4","C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\AddTask.js":"5","C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\Task.js":"6","C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\ToggleMode.js":"7","C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\globalStyles.js":"8","C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\useDarkMode.js":"9","C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\Toggler.js":"10","C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\Theme.js":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":3303,"mtime":1611595918291,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":287,"mtime":1611256414987,"results":"16","hashOfConfig":"13"},{"size":523,"mtime":1610978947726,"results":"17","hashOfConfig":"13"},{"size":1251,"mtime":1611258034407,"results":"18","hashOfConfig":"13"},{"size":222,"mtime":1611242289470,"results":"19","hashOfConfig":"13"},{"size":829,"mtime":1611597340016,"results":"20","hashOfConfig":"13"},{"size":548,"mtime":1611586324285,"results":"21","hashOfConfig":"13"},{"size":584,"mtime":1611587993362,"results":"22","hashOfConfig":"13"},{"size":618,"mtime":1611597534518,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1vsxrx5",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\index.js",[],["54","55"],"C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\App.js",["56","57"],"import React, {useState} from 'react';\nimport AddTask from './components/AddTask'\nimport Task from './components/Task'\nimport FilterButtons from './components/FilterButtons'\nimport { DragDropContext, Droppable} from 'react-beautiful-dnd'\nimport { nanoid } from 'nanoid';\nimport {ThemeProvider} from 'styled-components';\nimport { useDarkMode } from './components/useDarkMode'\nimport {GlobalStyles} from './components/globalStyles';\nimport {lightTheme, darkTheme} from './components/Theme';\nimport Toggle from './components/Toggler'\n\nconst filters = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task=> task.completed\n};\n\nconst filterNames = Object.keys(filters);\n\nexport default function App() {\n  \n  const [tasks, setTasks] = useState([])\n  const [filter, setFilter] = useState('All')\n  const [theme, themeToggler] = useDarkMode();\n\n  const taskList= tasks\n    .filter(filters[filter])\n    .map(task => \n        <Task \n        tasks={tasks} \n        deleteTask={deleteTask}\n        id={task.id} \n        content={task.content}\n        toggleTaskCompleted={toggleTaskCompleted}\n        completed={task.completed}\n        index={tasks.indexOf(task)}\n        key={task.id.toString()}\n       />)\n\n\n  const filterList = filterNames.map(name=> \n    <FilterButtons \n      key={name}\n      name={name}\n      setFilter={setFilter}\n    />)\n\n  function addTask(content) {\n    const newTask = {id: nanoid(), content: content, completed: false}\n    setTasks([...tasks, newTask])\n  }\n  \n  function deleteTask(id) {\n    const newTasks = tasks.filter(task => task.id !== id)\n    setTasks(newTasks)\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      if(id==task.id) {\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    })\n    setTasks(updatedTasks);\n\n  }\n\n  function handleClearCompleted(){\n    const activeTasks = tasks.filter(task => !task.completed) \n    setTasks(activeTasks)\n  }\n  \n\n  function handleDragEnd(result) {\n    if (!result.destination) return; \n    const items = Array.from(tasks)\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n\n    setTasks(items)\n  }\n\n  const themeMode = theme === 'light' ? lightTheme : darkTheme;\n\n  const counter = tasks.length\n  const counterNoun = tasks.length == 1 ? 'item' : 'items'\n\n  console.log(tasks)\n  return (\n    <ThemeProvider theme={themeMode}>\n    <div className=\"container\">\n    <GlobalStyles />\n      <div className=\"heading\">\n        <h1>Todo</h1>\n        <Toggle theme={theme} toggleTheme={themeToggler} />\n      </div>\n    <AddTask addTask={addTask}/>\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <Droppable droppableId=\"drop-area\">\n        {(provided) => (\n          <ul\n          {...provided.droppableProps} ref={provided.innerRef}>\n          {taskList} \n          {provided.placeholder}\n          </ul>\n        )}\n      </Droppable>\n    </DragDropContext>\n    <div className=\"bottomStats\">\n      <p>{counter} {counterNoun} left</p>\n      <div className=\"buttons\">\n        {filterList}\n        <button onClick={handleClearCompleted}> Clear Completed</button>\n      </div>\n    </div>\n    <footer>Drag and drop to reorder list</footer>\n    </div>\n    </ThemeProvider>\n  )\n}\n","C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\reportWebVitals.js",[],"C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\FilterButtons.js",["58"],"import React from 'react'\r\n\r\nexport default function FilterButtons({name, setFilter}) {\r\n    \r\n    return (\r\n            <button \r\n            onClick={()=>setFilter(name)}\r\n            className={name == \"All\" ? 'blue' : null}>\r\n                {name}\r\n            </button>\r\n    )\r\n}\r\n","C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\AddTask.js",[],"C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\Task.js",["59"],"import React from 'react';\r\nimport Cross from '../images/icon-cross.svg';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nexport default function Task({tasks, deleteTask, content, id, toggleTaskCompleted, completed, index}) {\r\n    \r\n        const task = (\r\n                <li \r\n                className=\"task\">\r\n                    <div className=\"taskContent\">\r\n                    <input \r\n                    id={id}\r\n                    type=\"checkbox\" \r\n                    onChange={()=> toggleTaskCompleted(id)}\r\n                    defaultChecked={completed}\r\n                    className={completed ? \"gradient\": null}\r\n                    />\r\n                    <p className={completed ? \"crossout\" : null}>{content}</p>\r\n                    </div>\r\n                    <img src={Cross} onClick={()=>deleteTask(id)}/>\r\n                </li>\r\n            )\r\n        \r\n    return (\r\n        <Draggable draggableId={id.toString()} index={index}>\r\n            {(provided) => (\r\n                <div \r\n                ref={provided.innerRef}\r\n                {...provided.draggableProps}\r\n                {...provided.dragHandleProps}>\r\n                    {task}\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n","C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\ToggleMode.js",["60"],"import React from 'react';\r\nimport Moon from '../images/icon-moon.svg'\r\n\r\nexport default function ToggleMode() {\r\n    return (\r\n        <div>\r\n            <img src={Moon} className=\"toggleImg\"/>\r\n        </div>\r\n    )\r\n}\r\n",["61","62"],"C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\globalStyles.js",[],"C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\useDarkMode.js",[],"C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\Toggler.js",["63"],"import React from 'react';\r\nimport { func, string } from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Moon from '../images/icon-moon.svg';\r\nimport Sun from '../images/icon-sun.svg'\r\n\r\nconst Button = styled.button`\r\n  border: none;\r\n  cursor: pointer;\r\n  `;\r\n\r\nconst Toggle = ({theme, toggleTheme}) => {\r\n    return (\r\n        <Button onClick={toggleTheme} >\r\n            <img src={theme === 'light' ? Moon : Sun } />\r\n        </Button>\r\n\r\n    )\r\n}\r\n\r\nToggle.propTypes = {\r\n    theme: string.isRequired,\r\n    toggleTheme: func.isRequired,\r\n}\r\n\r\nexport default Toggle;",["64","65"],"C:\\Users\\Gila Bieler-Hoch\\Desktop\\Projects\\mytodo\\src\\components\\Theme.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":61,"column":12,"nodeType":"72","messageId":"73","endLine":61,"endColumn":14},{"ruleId":"70","severity":1,"message":"71","line":88,"column":36,"nodeType":"72","messageId":"73","endLine":88,"endColumn":38},{"ruleId":"70","severity":1,"message":"71","line":8,"column":29,"nodeType":"72","messageId":"73","endLine":8,"endColumn":31},{"ruleId":"74","severity":1,"message":"75","line":20,"column":21,"nodeType":"76","endLine":20,"endColumn":68},{"ruleId":"74","severity":1,"message":"75","line":7,"column":13,"nodeType":"76","endLine":7,"endColumn":52},{"ruleId":"66","replacedBy":"77"},{"ruleId":"68","replacedBy":"78"},{"ruleId":"74","severity":1,"message":"75","line":15,"column":13,"nodeType":"76","endLine":15,"endColumn":58},{"ruleId":"66","replacedBy":"79"},{"ruleId":"68","replacedBy":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["81"],["82"],["81"],["82"],"no-global-assign","no-unsafe-negation"]